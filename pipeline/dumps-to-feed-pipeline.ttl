@prefix js: <https://w3id.org/conn/js#>.
@prefix : <https://w3id.org/conn#>.
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix tree: <https://w3id.org/tree#>.
@prefix as: <https://www.w3.org/ns/activitystreams#>.

<> owl:imports <./node_modules/@rdfc/js-runner/ontology.ttl>.
<> owl:imports <./node_modules/@rdfc/js-runner/channels/file.ttl>.
<> owl:imports <./node_modules/@rdfc/file-utils-processors-ts/processors.ttl>.
<> owl:imports <./node_modules/@rdfc/dumps-to-feed-processor-ts/processor.ttl>.
<> owl:imports <./node_modules/@rdfc/sds-processors-ts/configs/bucketizer.ttl>.
<> owl:imports <./node_modules/@rdfc/sds-processors-ts/configs/sdsify.ttl>.
<> owl:imports <./node_modules/@rdfc/sds-processors-ts/configs/ldes_disk_writer.ttl>.


#########################################
# Channel definitions
#########################################

# Channel for js:GlobRead → js:UnzipFile
<zip/writer> a js:JsWriterChannel.
<zip/reader> a js:JsReaderChannel.
[ ] a js:JsChannel;
    :reader <zip/reader>;
    :writer <zip/writer>.

# Channel for js:UnzipFile → js:DumpsToFeed
<dump/writer> a js:JsWriterChannel.
<dump/reader> a js:JsReaderChannel.
[ ] a js:JsChannel;
    :reader <dump/reader>;
    :writer <dump/writer>.

# Channel for js:DumpsToFeed → js:Sdsify
<feed/writer> a js:JsWriterChannel.
<feed/reader> a js:JsReaderChannel.
[ ] a js:JsChannel;
    :reader <feed/reader>;
    :writer <feed/writer>.

# Channel for js:Sdsify → js:Bucketize
<sds/writer> a js:JsWriterChannel.
<sds/reader> a js:JsReaderChannel.
[ ] a js:JsChannel;
    :reader <sds/reader>;
    :writer <sds/writer>.

# Channel for js:Bucketize → js:LdesDiskWriter
<bucketized/writer> a js:JsWriterChannel.
<bucketized/reader> a js:JsReaderChannel.
[ ] a js:JsChannel;
    :reader <bucketized/reader>;
    :writer <bucketized/writer>.

# Channel for js:GlobRead → js:Bucketize
<metadata/writer> a js:JsWriterChannel.
<metadata/reader> a js:JsReaderChannel.
[ ] a js:JsChannel;
    :reader <metadata/reader>;
    :writer <metadata/writer>.

# Channel for js:Bucketize → js:LdesDiskWriter
<metadata/bucketized/writer> a js:JsWriterChannel.
<metadata/bucketized/reader> a js:JsReaderChannel.
[ ] a js:JsChannel;
    :reader <metadata/bucketized/reader>;
    :writer <metadata/bucketized/writer>.


#########################################
# Processor definitions
#########################################

# Processor to read and stream out the gzipped DCAT-AP dump.
[ ] a js:GlobRead;
    js:glob <../all/datagovbe_edp.xml.gz>;
    js:output <zip/writer>;
    js:binary "true"^^xsd:boolean;
    js:closeOnEnd "true"^^xsd:boolean.

# Processor to unzip the gzipped DCAT-AP dump and stream out the N-Triples dump.
[ ] a js:GunzipFile;
    js:input <zip/reader>;
    js:output <dump/writer>.

# Processor to convert a dump of RDF data to a feed of ActivityStreams.
[ ] a js:DumpsToFeed;
    js:output <feed/writer>;
    js:feedname "belgium";
    js:flush "false"^^xsd:boolean;
    js:dump <dump/reader>;
    js:dumpContentType "application/rdf+xml";
    js:focusNodesStrategy "extract";
    js:nodeShapeIri "https://semiceu.github.io/LDES-DCAT-AP-feeds/shape.ttl#ActivityShape";
    js:dbDir <./leveldb/>.

# Processor to wrap the data as individual SDS records
[ ] a js:Sdsify;
    js:input <feed/reader>;
    js:output <sds/writer>;
    js:stream <https://w3id.org/sds#Stream>;
    js:typeFilter as:Create, as:Update, as:Delete;
    js:shape """
        @prefix sh: <http://www.w3.org/ns/shacl#> .
        @prefix as: <https://www.w3.org/ns/activitystreams#> .

        [ ] a sh:NodeShape ;
            sh:targetClass as:Create.
    """,
    """
        @prefix sh: <http://www.w3.org/ns/shacl#> .
        @prefix as: <https://www.w3.org/ns/activitystreams#> .

        [ ] a sh:NodeShape ;
            sh:targetClass as:Update.
    """,
    """
        @prefix sh: <http://www.w3.org/ns/shacl#> .
        @prefix as: <https://www.w3.org/ns/activitystreams#> .

        [ ] a sh:NodeShape ;
            sh:targetClass as:Delete.
    """.

# Processor to read and stream out the metadata for the LDES feed.
[ ] a js:GlobRead;
    js:glob <./metadata.ttl>;
    js:output <metadata/writer>;
    js:closeOnEnd "true"^^xsd:boolean.

# Processor to bucketize the data
[ ] a js:Bucketize;
    js:channels [
          js:dataInput <sds/reader>;
          js:dataOutput <bucketized/writer>;
          js:metadataInput <metadata/reader>;
          js:metadataOutput <metadata/bucketized/writer>;
      ];
    js:bucketizeStrategy ( [
                               a tree:TimebasedFragmentation;
                               tree:timestampPath <https://www.w3.org/ns/activitystreams#published>;
                               tree:maxSize 100;
                               tree:k 4;
                               tree:minBucketSpan 86400;  # 1 day
                           ]);
    js:savePath <./feed-state/buckets_save.json>;
    js:outputStreamId <https://w3id.org/sds#Stream>.

# Processor to persist the SDS stream into a MongoDB instance
[ ] a js:LdesDiskWriter;
    js:dataInput <bucketized/reader>;
    js:metadataInput <metadata/bucketized/reader>;
    js:directory <../docs>.
